# -*- coding: utf-8 -*-
"""Spotify Notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e-0mAnYKNlWdVEBrACa4iLzG1LUonCsv

# **Exploratory Data Analysis of Spotify Listening History**

In this notebook, we will perform exploratory data analysis (EDA) on my own Spotify listening history data. The dataset includes information such as the date and time of listening, artist name, track name, and duration of playback.

## Data Source

The Spotify listening history data was exported from the Spotify app.

## Analysis Goals

1. **Top Artists:** Identify the top ten most listened-to artists.
2. **Top Songs:** Determine the top ten most listened-to songs.
3. **Listening Trends:** Analyze trends in listening behavior over time.
4. **Favorite Artists:** Explore the top songs of favorite artists.
5. **Favorite Songs Over Time:** Examine the frequency of favorite songs over time.

## Tools Used

- Python programming language
- Pandas library for data manipulation
- Matplotlib and Seaborn for data visualization
- Spotify API for data retrieval

## Data Cleaning

Before performing analysis, we will clean the data by checking for missing values, converting data types, and handling any anomalies in the dataset.

## Analysis Steps

1. Load the Spotify listening history dataset.
2. Check data structure and clean the data if necessary.
3. Perform analysis to answer the specified questions.
4. Visualize the results using charts and graphs.
5. Draw conclusions and insights from the analysis.

Let's dive into the data and explore our Spotify listening history!

**Import the necessary Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""**Load the data**"""

dataset = pd.read_json(r'/content/StreamingHistory_music_0.json')

#Display the first five rows of the dataset:
dataset.head()

"""**Check for missing values**"""

pd.isnull(dataset).sum()

dataset.info()

"""**Convert Data Types**"""

# Convert 'endTime' to datetime format
dataset['endTime'] = pd.to_datetime(dataset['endTime'])

# Convert 'msPlayed' to numeric
dataset['msPlayed'] = pd.to_numeric(dataset['msPlayed'], errors='coerce')

"""**Top Ten Most Listened to Artists:**"""

top_artists = dataset['artistName'].value_counts().head(10)

top_artists

"""**Barchart:**"""

plt.figure(figsize=(10, 6))
top_artists.plot(kind='bar')
plt.title('Top Ten Most Listened to Artists')
plt.xlabel('Artist')
plt.ylabel('Number of Listens')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**Top Ten Most Listened to Songs:**"""

top_songs = dataset.groupby(['artistName', 'trackName']).size().reset_index(name='listens')
top_songs = top_songs.sort_values(by='listens', ascending=False).head(10)

top_songs

"""**Barchart:**"""

plt.figure(figsize=(10, 6))
top_songs.plot(kind='bar', x='trackName', y='listens')
plt.title('Top Ten Most Listened to Songs')
plt.xlabel('Song')
plt.ylabel('Number of Listens')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**Cumulative Time Spent Listening:**"""

total_time_ms = dataset['msPlayed'].sum()

#Converting ms into minutes:
total_time_min = total_time_ms / (1000 * 60)

print(f"{total_time_min} mins")

#Converting ms into hours:
total_time_hr = total_time_min / 60

print(f"{total_time_hr} hrs")

"""**Top Songs of Favorite Artists:**"""

favorite_artist = 'Lauren Jauregui'
top_songs_favorite = dataset[dataset['artistName'] == favorite_artist].groupby('trackName').size().reset_index(name='listens')
top_songs_favorite = top_songs_favorite.sort_values(by='listens', ascending=False).head(10)

print(f"Top Songs of {favorite_artist}:")
top_songs_favorite

"""**Barchart:**"""

plt.figure(figsize=(10, 6))
top_songs_favorite.plot(kind='bar', x='trackName', y='listens')
plt.title(f'Top Songs of {favorite_artist}')
plt.xlabel('Song')
plt.ylabel('Number of Listens')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**Trends in Listening to Favorite Artists:**"""

# Make a copy to avoid SettingWithCopyWarning

favorite_artist_trends = dataset[dataset['artistName'] == favorite_artist].copy()
favorite_artist_trends.loc[:, 'date'] = favorite_artist_trends['endTime'].dt.date
trends = favorite_artist_trends.groupby('date').size().reset_index(name='listens')

# Export trends data to CSV
trends.to_csv('favorite_artist_trends.csv', index=False)

print(f"Trends in Listening to {favorite_artist}:")
trends

"""**Line Plot:**"""

import seaborn as sns

plt.figure(figsize=(10, 6))
sns.lineplot(x='date', y='listens', data=trends)
plt.title(f'Trends in Listening to {favorite_artist}')
plt.xlabel('Date')
plt.ylabel('Number of Listens')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**Frequency of Top Songs Over Time:**"""

favorite_song = 'Headaches'

# Make a copy to avoid SettingWithCopyWarning

favorite_song_trends = dataset[dataset['trackName'] == favorite_song].copy()
favorite_song_trends.loc[:, 'date'] = favorite_song_trends['endTime'].dt.date
trends_song = favorite_song_trends.groupby('date').size().reset_index(name='listens')

# Export trends_song data to CSV
trends_song.to_csv('favorite_song_trends.csv', index=False)

print(f"Trends of {favorite_song} Over Time:")
trends_song

"""**Line Plot:**"""

plt.figure(figsize=(10, 6))
sns.lineplot(x='date', y='listens', data=trends_song)
plt.title(f'Trends of {favorite_song} Over Time')
plt.xlabel('Date')
plt.ylabel('Number of Listens')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()